{"version":3,"sources":["AppAsClassComponent.js","App.js","reportWebVitals.js","index.js"],"names":["PersonRow","person","onSelect","first_name","email","Button","onClick","variant","color","endIcon","id","PersonInfo","last_name","gender","ip_address","AppAsClassComponent","props","state","firstName","selectedItem","fetch","then","res","json","data","setState","className","value","this","onChange","evt","target","type","width","filter","p","toLocaleLowerCase","includes","slice","map","React","Component","App","useState","setfirstName","setSelectedItem","setPerson","useEffect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b06ffaa.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './App.css';\r\nimport ControlPointIcon from '@material-ui/icons/ControlPoint';\r\nimport {Button} from '@material-ui/core'\r\n\r\n\r\nconst PersonRow = ({person, onSelect}) =>( // Component definition. onSelect is a custom event handler function. it is defined where the component is called.\r\n    <>\r\n    <tr key={person.id}>\r\n      <td>{person.first_name}</td>\r\n      <td>{person.email}</td>\r\n      {/* <td><button onClick = { ()=> onSelect(person)}> Select </button></td>  click event handler for the button will call onSelect and give back the pokemon that was chosen */}\r\n      <td>  <Button\r\n      onClick = { ()=> onSelect(person)}\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      endIcon={<ControlPointIcon>Select</ControlPointIcon>}\r\n    >Select</Button></td>\r\n    </tr>\r\n    </>\r\n)\r\n\r\nconst PersonInfo = ({first_name, last_name, email, gender, ip_address}) =>( // here we are directly using the variables. so when this component is used, we need to spread the person object.\r\n  first_name + \" \"+ last_name +\" | \"+ email +\" | \"+ gender +\" | \"+ ip_address\r\n)\r\n\r\n//Class Component\r\nclass AppAsClassComponent extends React.Component {\r\n\r\n    // constructor takes props as argument\r\n    constructor(props){\r\n        // pass props to parent class \r\n        super(props)\r\n\r\n        // use state instead of react hooks\r\n        this.state = {\r\n            firstName: \"\",\r\n            selectedItem: [],\r\n            person: null\r\n        }\r\n    }\r\n    \r\n    // Similar to React.useEffect of functional component\r\n    componentDidMount(){\r\n        fetch(\"/starting-react/MOCK_DATA.json\")\r\n        .then( (res)=> res.json())\r\n        .then( (data)=> this.setState({...this.state, person: data}))\r\n    }\r\n    // render function does not take any arguments\r\n    render(){\r\n        return (<div className=\"title\">\r\n      <h1> Person Search Using Class Component </h1>\r\n      <input value={this.state.firstName} \r\n        onChange={(evt) => this.setState({\r\n          ...this.state, //leave all other state vars as it is \r\n          firstName: evt.target.value})} /* Updating value of hook when it's value changes in input box */\r\n        type=\"text\"/> \r\n\r\n      <table width=\"100%\">\r\n        <tbody>\r\n        {this.state.person && this.state.person.filter((p)=>p.first_name.toLocaleLowerCase().includes(this.state.firstName.toLocaleLowerCase())).slice(0,20)\r\n        .map( (p)=> (\r\n            <PersonRow person={p} onSelect={(p)=> {this.setState({...this.state, selectedItem: p})}}/> // call the component and give the values. defining onSelect here as well.\r\n        ))}\r\n        </tbody>\r\n      </table>\r\n      {/* Displaying the selected item */}\r\n     {this.state.selectedItem? (\r\n       // this is another way of passing values \r\n       <h1> <PersonInfo {...this.state.selectedItem}/> </h1> // Spreading the selectedItem object, because the component itself takes spreaded values and not the whole object. \r\n     ): \"\"}\r\n    </div>)\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default AppAsClassComponent;","import React from \"react\";\nimport './App.css';\n// import person from './MOCK_DATA.json'\nimport ControlPointIcon from '@material-ui/icons/ControlPoint';\nimport {Button} from '@material-ui/core'\nimport AppAsClassComponent from './AppAsClassComponent'\n//functional component\nfunction App() {\n\n  // we are going to filter on the records based on the firstName variable.\n  // Using React Hooks \n  const [firstName, setfirstName] = React.useState(\"\") // firstName is a state string variable, and setfirstName is a function to set that state\n  const [selectedItem, setSelectedItem] = React.useState(\"\")\n  const [person, setPerson] = React.useState([]) // person is a state array variable. \n\n  // useEffect runs a function in reaction to a change.\n  // first argument: a function. \n  // second argument: an array of values. eg= [firstName, selectedItem]. \n  // if these values change, you want the defined function to run (first arg)\n  // if second arg is an empty array, the function runs ONCE when the component is loaded onto the page. \n  // Similar to componentDidMount() of Class Component\n  React.useEffect( ()=>{\n      fetch(\"/starting-react/MOCK_DATA.json\")\n      .then( (res)=> res.json())\n      .then( (data)=> setPerson(data))\n  }, [])\n\n  const PersonRow = ({person, onSelect}) =>( // Component definition. onSelect is a custom event handler function. it is defined where the component is called.\n      <>\n      <tr key={person.id}>\n        <td>{person.first_name}</td>\n        <td>{person.email}</td>\n        {/* <td><button onClick = { ()=> onSelect(person)}> Select </button></td>  click event handler for the button will call onSelect and give back the pokemon that was chosen */}\n        <td>  <Button\n        onClick = { ()=> onSelect(person)}\n        variant=\"contained\"\n        color=\"primary\"\n        endIcon={<ControlPointIcon>Select</ControlPointIcon>}\n      >Select</Button></td>\n      </tr>\n      </>\n  )\n\n  const PersonInfo = ({first_name, last_name, email, gender, ip_address}) =>( // here we are directly using the variables. so when this component is used, we need to spread the person object.\n    first_name + \" \"+ last_name +\" | \"+ email +\" | \"+ gender +\" | \"+ ip_address\n  )\n\n  \n  return (\n    <div className=\"title\">\n      <h1> Person Search Using Functional Component</h1>\n      <input value={firstName} \n      onChange={(evt) => setfirstName(evt.target.value)} type=\"text\"/> {/* Updating value of hook when it's value changes in input box */}\n      <table width=\"100%\">\n        <tbody>\n        {person.filter((p)=>p.first_name.toLocaleLowerCase().includes(firstName.toLocaleLowerCase())).slice(0,20)\n        .map( (p)=> (\n            <PersonRow person={p} onSelect={(p)=> {setSelectedItem(p)}}/> // call the component and give the values. defining onSelect here as well.\n        ))}\n        </tbody>\n      </table>\n      {/* Displaying the selected item */}\n     {selectedItem && (\n       // this is another way of passing values \n       <h1> <PersonInfo {...selectedItem}/> </h1> // Spreading the selectedItem object, because the component itself takes spreaded values and not the whole object. \n     )}\n\n\n     <AppAsClassComponent/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}