{"version":3,"sources":["AppAsClassComponent.js","App.js","reportWebVitals.js","index.js"],"names":["PersonRow","person","onSelect","first_name","email","Button","onClick","variant","color","endIcon","id","PersonInfo","last_name","gender","ip_address","React","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAMMA,EAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAQC,EAAV,EAAUA,SAAV,OACd,aADuC,CACvC,qBACA,+BACE,6BAAKD,EAAOE,aACZ,6BAAKF,EAAOG,QAEZ,oCAAM,cAACC,EAAA,EAAD,CACNC,QAAY,kBAAKJ,EAASD,IAC1BM,QAAQ,YACRC,MAAM,UACNC,QAAS,cAAC,IAAD,qBAJH,yBAJCR,EAAOS,OAcdC,EAAa,SAAC,GAAD,SAAER,WACN,IADI,EAAcS,UACF,MADZ,EAAyBR,MACC,MAD1B,EAAgCS,OACS,MADzC,EAAwCC,YAKzBC,IAAMC,UCXzBC,MATf,WAEE,OACE,qBAAKC,UAAU,QAAf,iBCEWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.047aeb87.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './App.css';\r\nimport ControlPointIcon from '@material-ui/icons/ControlPoint';\r\nimport {Button} from '@material-ui/core'\r\n\r\n\r\nconst PersonRow = ({person, onSelect}) =>( // Component definition. onSelect is a custom event handler function. it is defined where the component is called.\r\n    <>\r\n    <tr key={person.id}>\r\n      <td>{person.first_name}</td>\r\n      <td>{person.email}</td>\r\n      {/* <td><button onClick = { ()=> onSelect(person)}> Select </button></td>  click event handler for the button will call onSelect and give back the pokemon that was chosen */}\r\n      <td>  <Button\r\n      onClick = { ()=> onSelect(person)}\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      endIcon={<ControlPointIcon>Select</ControlPointIcon>}\r\n    >Select</Button></td>\r\n    </tr>\r\n    </>\r\n)\r\n\r\nconst PersonInfo = ({first_name, last_name, email, gender, ip_address}) =>( // here we are directly using the variables. so when this component is used, we need to spread the person object.\r\n  first_name + \" \"+ last_name +\" | \"+ email +\" | \"+ gender +\" | \"+ ip_address\r\n)\r\n\r\n//Class Component\r\nclass AppAsClassComponent extends React.Component {\r\n\r\n    // constructor takes props as argument\r\n    constructor(props){\r\n        // pass props to parent class \r\n        super(props)\r\n\r\n        // use state instead of react hooks\r\n        this.state = {\r\n            firstName: \"\",\r\n            selectedItem: [],\r\n            person: null,\r\n            firstButtonShow: true\r\n        }\r\n    }\r\n    \r\n    // Similar to React.useEffect of functional component\r\n    componentDidMount(){\r\n        fetch(\"/starting-react/MOCK_DATA.json\")\r\n        .then( (res)=> res.json())\r\n        .then( (data)=> this.setState({...this.state, person: data}))\r\n    }\r\n\r\n    buttonChange(e, b1){\r\n      this.setState({\r\n        firstButtonShow: b1\r\n      })\r\n     \r\n    }\r\n    // render function does not take any arguments\r\n    render(){\r\n        return (<div className=\"title\">\r\n\r\n      <Button style={{background: this.state.firstButtonShow?\"blue\":\"grey\"}} onClick={(e)=>this.buttonChange(e, true)}> Price </Button>\r\n      <Button style={{background: !this.state.firstButtonShow?\"blue\":\"grey\"}} onClick={(e)=>this.buttonChange(e, false)}> Chart </Button>\r\n      {this.state.firstButtonShow? <div> Content 1 </div> : <div> Content 2 </div>}\r\n      {/* { this.state.firstButtonShow&& this.state.secondButtonShow? <div> Content 1 </div>: \"\" }\r\n      {this.state.secondButtonShow==true && this.state.firstButtonShow==false? <div> Content 2 </div> : \"\"} */}\r\n\r\n      <h1> Person Search Using Class Component </h1>\r\n      <input value={this.state.firstName} \r\n        onChange={(evt) => this.setState({\r\n          ...this.state, //leave all other state vars as it is \r\n          firstName: evt.target.value})} /* Updating value of hook when it's value changes in input box */\r\n        type=\"text\"/> \r\n\r\n      <table width=\"100%\">\r\n        <tbody>\r\n        {this.state.person && this.state.person.filter((p)=>p.first_name.toLocaleLowerCase().includes(this.state.firstName.toLocaleLowerCase())).slice(0,20)\r\n        .map( (p)=> (\r\n            <PersonRow person={p} onSelect={(p)=> {this.setState({...this.state, selectedItem: p})}}/> // call the component and give the values. defining onSelect here as well.\r\n        ))}\r\n        </tbody>\r\n      </table>\r\n      {/* Displaying the selected item */}\r\n     {this.state.selectedItem? (\r\n       // this is another way of passing values \r\n       <h1> <PersonInfo {...this.state.selectedItem}/> </h1> // Spreading the selectedItem object, because the component itself takes spreaded values and not the whole object. \r\n     ): \"\"}\r\n    </div>)\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default AppAsClassComponent;","import React from \"react\";\r\nimport './App.css';\r\n// import person from './MOCK_DATA.json'\r\nimport ControlPointIcon from '@material-ui/icons/ControlPoint';\r\nimport {Button} from '@material-ui/core'\r\nimport AppAsClassComponent from './AppAsClassComponent'\r\n//functional component\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"title\">\r\n    Hi\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}